% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flow.R
\name{flow}
\alias{flow}
\alias{is_flow}
\alias{is.flow}
\alias{$.Flow}
\alias{$<-.Flow}
\alias{print.Flow}
\title{Create Flow objects to better organize pipelines in R}
\usage{
flow(. = NULL, .value = NULL, ...)

is_flow(x)

is.flow(x)

\method{$}{Flow}(x, name)

\method{$}{Flow}(x, name) <- value

\method{print}{Flow}(x, ...)
}
\arguments{
\item{.}{If a \strong{Flow} object is provided, herite from it, otherwise, create
a new \strong{Flow} object heritating from \code{.GlobalEnv} with \code{.} as pipe value.}

\item{.value}{The pipe value to pass to the object (used in priority to \code{.},
in case both are provided).}

\item{...}{For \code{flow()}, named arguments of other objects to create inside
the \strong{Flow}. If the name ends with \code{_}, then, the expression is
automatically captured inside a \emph{$quosure}* (see \code{\link[=quos_underscore]{quos_underscore()}}).
For \code{print()}, further arguments passed to the delegated \code{print_proto()}
function (if it exists inside the \strong{Flow} object), or to the \code{print()}
method of the object inside \code{.value}.}

\item{x}{An object (a \strong{Flow} object, or anyting to test if it is a \strong{Flow}
object in \code{is_flow()}).}

\item{name}{The name of the item to get from a \strong{Flow} object. If \code{name}
starts with two dots (\code{..}), the item is searched in the \strong{Flow} object
itself without inheritance (like for \strong{proto} objects), but \emph{the name is
stripped from its leading two dots first}! If the content is a \strong{quosure},
it is automatically unquoted, and for the assignation version, if name ends
with \code{_}, the expression is automatically converted into a \strong{quosure}.}

\item{value}{The value or expression to assign to \code{name} inside the \strong{Flow}
object.}
}
\description{
\strong{Flow} objects, as explicitly created by \code{flow()}, or implicitly by the
\code{\link{\%>_\%}} pipe operator are \strong{proto} objects (class-less objects
with possible inheritance) that can be compbined nicely with pipelines using
the specialized flow pipe operators \code{\link{\%>.\%}} and
\code{\link{\%>_\%}} (or by using \code{$}). They allow to encapsulate temporary
variables related to the pipeline, and they automate the encapsulation of
non-standard evaluations automatically with minimal changes required by the
user (in comparison to the \strong{rlang} tidy evalution mechanism).
}
\details{
When a \strong{Flow} object is created from scratch, it always inherits
from \code{.GlobalEnv}, no mather where the expression was executed (in fact, it
inherits from a root \strong{proto} object itself inheriting from \code{.GlobalEnv}).
This is a design strategy to overcome some difficulties and limitations of
\strong{proto} objects, see \code{\link[=proto]{proto()}}.
}
\examples{
# TODO...
}
\seealso{
\code{\link[=str.Flow]{str.Flow()}}, \code{\link[=quos_underscore]{quos_underscore()}}, \code{\link{\%>_\%}}
}
\concept{
class-less objects for better R pipelines
}
\keyword{utilities}
