% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipe.R
\name{pipe}
\alias{pipe}
\alias{debug_flow}
\alias{\%>.\%}
\alias{\%>+\%}
\title{Flow pipeline operators and debugging function}
\usage{
debug_flow()

x \%>.\% expr

x \%>+\% expr
}
\arguments{
\item{x}{Value or \strong{Flow} object to pass to the pipeline.}

\item{expr}{Expression to evaluation in the pipeline.}
}
\description{
Pipe operators. The simple one with no forcing to \strong{Flow} objects is
\code{\link{\%>.\%}}. \code{\link{\%>+\%}} forces convertion to \strong{Flow} and
automatically manage non-standard evaluation through creation and unquoting
of \strong{quosure}s for named arguments whose name ends with \code{_}.
}
\details{
With \code{\%>.\%}, the value must be explicitly indicated with a
\code{.} inside the expression. The expression is \strong{not} modified, but the value
is first assigned into the calling environment as \code{.} (warning! possibly
replacing any existing value... do \strong{not} use \code{.} to name other objects).
Also the expression is saved as \code{.call} in the calling environment so that
\code{debug_flow()} can retrieve are rerun it easily.

In the case of \strong{Flow} objects, it is also assigned in the calling
environment as \code{..}.

For \code{\%>+\%}, the expression is reworked like this. First, \code{++} is
interpreted as "get from the \strong{Flow} object, or inherited environment, and
unquote expression"; \code{..} is interpreted as "get from the \strong{Flow} object
without inheritage and unquote expression", and finally, if the expression
starts by calling a regular function name, without specifying \code{.} as first
argument, it is added. The raw expression is saved as \code{.call_raw}, while the
reworked call is saved as \code{.call} for possible further inspection and
debugging.

Finally, for both \code{\%>.\%} and \code{\%>+\%}, if \code{x} is a \strong{Flow}
object, and \code{expr} is \code{.}, then, the last value from the pipe is extracted
from the \strong{Flow} object and returned. It is equivalent, thus, to
\code{flow_obj$.value}.
}
\examples{
# TODO...
}
\seealso{
\code{\link[=flow]{flow()}}, \code{\link[=quos_underscore]{quos_underscore()}}
}
\concept{
pipeline operators and debugging
}
\keyword{utilities}
